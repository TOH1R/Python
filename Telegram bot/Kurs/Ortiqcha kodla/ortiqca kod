; #korzinka_uzbek
; @dp.message(F.text == "Korzinka")
; async def orders_function(message: types.Message):
;     if orders:
;         await message.answer(f"Sizni buyurtmalaringiz: {', '.join(orders)}", reply_markup=card_uz)
;     else:
;         await message.answer("Sizda hali buyurtma yo'q.")



; @dp.message(filters.Command("menyu"))
; async def lang_function(message: types.Message):
;     await message.answer(text="Menyudasiz", reply_markup=main_menu_uzbek)


; @dp.message(filters.Command("uz_card"))
; async def lang_function(message: types.Message):
;     await message.answer(text="Siz karta bolimidasiz", reply_markup=card_uz)

; @dp.message(F.text == "UzCard")
; async def pey_function(message: types.Message, state: FSMContext):
;     await state.set_state(Card.card_number)
;     await message.answer("Karta raqamini kiriting üí≥")

; @dp.message(F.text == "Humo")
; async def pey_function(message: types.Message, state: FSMContext):
;     await state.set_state(Card.card_number)
;     await message.answer("Karta raqamini kiriting üí≥")





; #korzinka_rus
; @dp.message(Card.card_number)
; async def card_number_function(message: types.Message, state: FSMContext):
;     text = message.text
;     if text.isdigit() and len(text) == 16:
;         await state.update_data(card_number=message.text)
;         await message.answer("Haridingiz uchun rahmat!", reply_markup=main_button_lang)
;     else:
;         await message.answer("Boshidan urinib ko'ring !\nKartangizni raqami 16 sondan iborat bolishi kerak")
;     await state.clear()    
    
    
; @dp.message(F.text == "–ö–æ—Ä–∑–∏–Ω–∞")
; async def orders_function(message: types.Message):
;     if order:
;         await message.answer(f"–í–∞—à–∏ –∑–∞–∫–∞–∑—ã: {', '.join(order)}", reply_markup=card_ru)
;     else:
;         await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")

; @dp.message(filters.Command("menyu_rus"))
; async def lang_function(message: types.Message):
;     await message.answer(text="–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é", reply_markup=main_menu_rus)

; @dp.message(filters.Command("ru_card"))
; async def lang_function(message: types.Message):
;     await message.answer(text="–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ –∫–∞—Ä—Ç—ã", reply_markup=card_ru)


; @dp.message(F.text == "–£–∑–ö–∞—Ä–¥")
; async def pey_function(message: types.Message, state: FSMContext):
;     await state.set_state(Card.card_number)
;     await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã üí≥")

; @dp.message(F.text == "–•—É–º–æ")
; async def pey_function(message: types.Message, state: FSMContext):
;     await state.set_state(Card.card_number)
;     await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã üí≥")

; @dp.message(Card.card_number)
; async def card_number_function(message: types.Message, state: FSMContext):
;     text = message.text
;     if text.isdigit() and len(text) == 16:
;         await state.update_data(card_number=message.text)
;         await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É", reply_markup=main_button_lang)
;     else:
;         await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!\n –ù–æ–º–µ—Ä –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 16 —Ü–∏—Ñ—Ä.") 